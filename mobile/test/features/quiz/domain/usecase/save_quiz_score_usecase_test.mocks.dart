// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/quiz/domain/usecase/save_quiz_score_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:prepgenie/core/core.dart' as _i5;
import 'package:prepgenie/features/features.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuizRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizRepository extends _i1.Mock implements _i3.QuizRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.Quiz>>> getQuizByCourseId({
    required String? courseId,
    required bool? isRefreshed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuizByCourseId,
          [],
          {
            #courseId: courseId,
            #isRefreshed: isRefreshed,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i3.Quiz>>>.value(
            _FakeEither_0<_i5.Failure, List<_i3.Quiz>>(
          this,
          Invocation.method(
            #getQuizByCourseId,
            [],
            {
              #courseId: courseId,
              #isRefreshed: isRefreshed,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.Quiz>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.Quiz>>(
          this,
          Invocation.method(
            #getQuizByCourseId,
            [],
            {
              #courseId: courseId,
              #isRefreshed: isRefreshed,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.Quiz>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> createQuiz({
    required String? name,
    required List<String>? chapters,
    required int? numberOfQuestion,
    required String? courseId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createQuiz,
          [],
          {
            #name: name,
            #chapters: chapters,
            #numberOfQuestion: numberOfQuestion,
            #courseId: courseId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #createQuiz,
            [],
            {
              #name: name,
              #chapters: chapters,
              #numberOfQuestion: numberOfQuestion,
              #courseId: courseId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #createQuiz,
            [],
            {
              #name: name,
              #chapters: chapters,
              #numberOfQuestion: numberOfQuestion,
              #courseId: courseId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.QuizQuestion>> getQuizById({
    required String? quizId,
    required bool? isRefreshed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuizById,
          [],
          {
            #quizId: quizId,
            #isRefreshed: isRefreshed,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.QuizQuestion>>.value(
                _FakeEither_0<_i5.Failure, _i3.QuizQuestion>(
          this,
          Invocation.method(
            #getQuizById,
            [],
            {
              #quizId: quizId,
              #isRefreshed: isRefreshed,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.QuizQuestion>>.value(
                _FakeEither_0<_i5.Failure, _i3.QuizQuestion>(
          this,
          Invocation.method(
            #getQuizById,
            [],
            {
              #quizId: quizId,
              #isRefreshed: isRefreshed,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.QuizQuestion>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> saveQuizScore({
    required String? quizId,
    required int? score,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveQuizScore,
          [],
          {
            #quizId: quizId,
            #score: score,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #saveQuizScore,
            [],
            {
              #quizId: quizId,
              #score: score,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #saveQuizScore,
            [],
            {
              #quizId: quizId,
              #score: score,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
