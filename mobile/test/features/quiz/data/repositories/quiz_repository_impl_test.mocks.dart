// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/quiz/data/repositories/quiz_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:prepgenie/core/core.dart' as _i6;
import 'package:prepgenie/features/features.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuizQuestionModel_0 extends _i1.SmartFake
    implements _i2.QuizQuestionModel {
  _FakeQuizQuestionModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_1 extends _i1.SmartFake implements _i3.IOSOptions {
  _FakeIOSOptions_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_2 extends _i1.SmartFake
    implements _i3.AndroidOptions {
  _FakeAndroidOptions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_3 extends _i1.SmartFake implements _i3.LinuxOptions {
  _FakeLinuxOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_4 extends _i1.SmartFake
    implements _i3.WindowsOptions {
  _FakeWindowsOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_5 extends _i1.SmartFake implements _i3.WebOptions {
  _FakeWebOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_6 extends _i1.SmartFake implements _i3.MacOsOptions {
  _FakeMacOsOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuizRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizRemoteDataSource extends _i1.Mock
    implements _i2.QuizRemoteDataSource {
  @override
  _i4.Future<List<_i2.QuizModel>> getQuizByCourseId(String? courseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuizByCourseId,
          [courseId],
        ),
        returnValue: _i4.Future<List<_i2.QuizModel>>.value(<_i2.QuizModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.QuizModel>>.value(<_i2.QuizModel>[]),
      ) as _i4.Future<List<_i2.QuizModel>>);

  @override
  _i4.Future<String> createQuiz({
    required String? name,
    required List<String>? chapters,
    required int? numberOfQuestion,
    required String? courseId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createQuiz,
          [],
          {
            #name: name,
            #chapters: chapters,
            #numberOfQuestion: numberOfQuestion,
            #courseId: courseId,
          },
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createQuiz,
            [],
            {
              #name: name,
              #chapters: chapters,
              #numberOfQuestion: numberOfQuestion,
              #courseId: courseId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createQuiz,
            [],
            {
              #name: name,
              #chapters: chapters,
              #numberOfQuestion: numberOfQuestion,
              #courseId: courseId,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i2.QuizQuestionModel> getQuizById(String? quizId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuizById,
          [quizId],
        ),
        returnValue:
            _i4.Future<_i2.QuizQuestionModel>.value(_FakeQuizQuestionModel_0(
          this,
          Invocation.method(
            #getQuizById,
            [quizId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.QuizQuestionModel>.value(_FakeQuizQuestionModel_0(
          this,
          Invocation.method(
            #getQuizById,
            [quizId],
          ),
        )),
      ) as _i4.Future<_i2.QuizQuestionModel>);

  @override
  _i4.Future<void> saveQuizScore({
    required String? quizId,
    required int? score,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveQuizScore,
          [],
          {
            #quizId: quizId,
            #score: score,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i3.FlutterSecureStorage {
  @override
  _i3.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_1(
          this,
          Invocation.getter(#iOptions),
        ),
        returnValueForMissingStub: _FakeIOSOptions_1(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i3.IOSOptions);

  @override
  _i3.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_2(
          this,
          Invocation.getter(#aOptions),
        ),
        returnValueForMissingStub: _FakeAndroidOptions_2(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i3.AndroidOptions);

  @override
  _i3.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_3(
          this,
          Invocation.getter(#lOptions),
        ),
        returnValueForMissingStub: _FakeLinuxOptions_3(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i3.LinuxOptions);

  @override
  _i3.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_4(
          this,
          Invocation.getter(#wOptions),
        ),
        returnValueForMissingStub: _FakeWindowsOptions_4(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i3.WindowsOptions);

  @override
  _i3.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_5(
          this,
          Invocation.getter(#webOptions),
        ),
        returnValueForMissingStub: _FakeWebOptions_5(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i3.WebOptions);

  @override
  _i3.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_6(
          this,
          Invocation.getter(#mOptions),
        ),
        returnValueForMissingStub: _FakeMacOsOptions_6(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i3.MacOsOptions);

  @override
  _i4.Future<void> write({
    required String? key,
    required String? value,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> read({
    required String? key,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<bool> containsKey({
    required String? key,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> delete({
    required String? key,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, String>> readAll({
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i4.Future<Map<String, String>>);

  @override
  _i4.Future<void> deleteAll({
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [QuizLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizLocalDatasource extends _i1.Mock
    implements _i2.QuizLocalDatasource {
  @override
  _i4.Future<void> cacheQuiz(
    dynamic quiz,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheQuiz,
          [
            quiz,
            id,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.QuizModel>?> getQuiz(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getQuiz,
          [id],
        ),
        returnValue: _i4.Future<List<_i2.QuizModel>?>.value(),
        returnValueForMissingStub: _i4.Future<List<_i2.QuizModel>?>.value(),
      ) as _i4.Future<List<_i2.QuizModel>?>);

  @override
  _i4.Future<void> cacheQuizQuestions(
    dynamic quiz,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheQuizQuestions,
          [
            quiz,
            id,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.QuizQuestionModel?> getQuizQuestions(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuizQuestions,
          [id],
        ),
        returnValue: _i4.Future<_i2.QuizQuestionModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.QuizQuestionModel?>.value(),
      ) as _i4.Future<_i2.QuizQuestionModel?>);
}
