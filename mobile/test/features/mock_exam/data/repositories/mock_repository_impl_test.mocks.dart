// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/mock_exam/data/repositories/mock_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:skill_bridge_mobile/core/core.dart' as _i4;
import 'package:skill_bridge_mobile/features/features.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMockModel_0 extends _i1.SmartFake implements _i2.MockModel {
  _FakeMockModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMockExamModel_1 extends _i1.SmartFake implements _i2.MockExamModel {
  _FakeMockExamModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockExamRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockExamRemoteDatasource extends _i1.Mock
    implements _i2.MockExamRemoteDatasource {
  @override
  _i3.Future<List<_i2.MockExamModel>> getMocks() => (super.noSuchMethod(
        Invocation.method(
          #getMocks,
          [],
        ),
        returnValue:
            _i3.Future<List<_i2.MockExamModel>>.value(<_i2.MockExamModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.MockExamModel>>.value(<_i2.MockExamModel>[]),
      ) as _i3.Future<List<_i2.MockExamModel>>);

  @override
  _i3.Future<_i2.MockModel> getMockById(
    String? mockId,
    int? pageNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMockById,
          [
            mockId,
            pageNumber,
          ],
        ),
        returnValue: _i3.Future<_i2.MockModel>.value(_FakeMockModel_0(
          this,
          Invocation.method(
            #getMockById,
            [
              mockId,
              pageNumber,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.MockModel>.value(_FakeMockModel_0(
          this,
          Invocation.method(
            #getMockById,
            [
              mockId,
              pageNumber,
            ],
          ),
        )),
      ) as _i3.Future<_i2.MockModel>);

  @override
  _i3.Future<_i2.MockExamModel> getMockAnalysis() => (super.noSuchMethod(
        Invocation.method(
          #getMockAnalysis,
          [],
        ),
        returnValue: _i3.Future<_i2.MockExamModel>.value(_FakeMockExamModel_1(
          this,
          Invocation.method(
            #getMockAnalysis,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.MockExamModel>.value(_FakeMockExamModel_1(
          this,
          Invocation.method(
            #getMockAnalysis,
            [],
          ),
        )),
      ) as _i3.Future<_i2.MockExamModel>);

  @override
  _i3.Future<List<_i2.DepartmentMockModel>> getDepartmentMocks(
    String? departmentId,
    bool? isStandard,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDepartmentMocks,
          [
            departmentId,
            isStandard,
          ],
        ),
        returnValue: _i3.Future<List<_i2.DepartmentMockModel>>.value(
            <_i2.DepartmentMockModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.DepartmentMockModel>>.value(
                <_i2.DepartmentMockModel>[]),
      ) as _i3.Future<List<_i2.DepartmentMockModel>>);

  @override
  _i3.Future<void> upsertMockScore(
    String? mockId,
    int? score,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsertMockScore,
          [
            mockId,
            score,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i2.UserMockModel>> getMyMocks() => (super.noSuchMethod(
        Invocation.method(
          #getMyMocks,
          [],
        ),
        returnValue:
            _i3.Future<List<_i2.UserMockModel>>.value(<_i2.UserMockModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.UserMockModel>>.value(<_i2.UserMockModel>[]),
      ) as _i3.Future<List<_i2.UserMockModel>>);

  @override
  _i3.Future<void> addMocktoUserMocks(String? mockId) => (super.noSuchMethod(
        Invocation.method(
          #addMocktoUserMocks,
          [mockId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> retakeMock(String? mockId) => (super.noSuchMethod(
        Invocation.method(
          #retakeMock,
          [mockId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i4.NetworkInfo {
  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [MockExamLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockExamLocalDatasource extends _i1.Mock
    implements _i2.MockExamLocalDatasource {
  @override
  _i3.Future<List<_i2.DepartmentMockModel>?> getDepartmentMocks({
    required String? id,
    required bool? isStandard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDepartmentMocks,
          [],
          {
            #id: id,
            #isStandard: isStandard,
          },
        ),
        returnValue: _i3.Future<List<_i2.DepartmentMockModel>?>.value(),
        returnValueForMissingStub:
            _i3.Future<List<_i2.DepartmentMockModel>?>.value(),
      ) as _i3.Future<List<_i2.DepartmentMockModel>?>);

  @override
  _i3.Future<void> cacheDepartmentMocks({
    required dynamic departmentMocks,
    required String? id,
    required bool? isStandard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheDepartmentMocks,
          [],
          {
            #departmentMocks: departmentMocks,
            #id: id,
            #isStandard: isStandard,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i2.UserMockModel>?> getMyMocks() => (super.noSuchMethod(
        Invocation.method(
          #getMyMocks,
          [],
        ),
        returnValue: _i3.Future<List<_i2.UserMockModel>?>.value(),
        returnValueForMissingStub: _i3.Future<List<_i2.UserMockModel>?>.value(),
      ) as _i3.Future<List<_i2.UserMockModel>?>);

  @override
  _i3.Future<void> cacheMyMocks(dynamic myMocks) => (super.noSuchMethod(
        Invocation.method(
          #cacheMyMocks,
          [myMocks],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.MockModel?> getCachedMockExam({
    required String? id,
    required int? pageNumer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedMockExam,
          [],
          {
            #id: id,
            #pageNumer: pageNumer,
          },
        ),
        returnValue: _i3.Future<_i2.MockModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i2.MockModel?>.value(),
      ) as _i3.Future<_i2.MockModel?>);

  @override
  _i3.Future<void> saveMockExam({
    required dynamic mockExam,
    required String? id,
    required int? pageNumer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMockExam,
          [],
          {
            #mockExam: mockExam,
            #id: id,
            #pageNumer: pageNumer,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
