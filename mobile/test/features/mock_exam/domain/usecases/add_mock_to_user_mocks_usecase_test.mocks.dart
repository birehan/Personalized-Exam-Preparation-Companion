// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/mock_exam/domain/usecases/add_mock_to_user_mocks_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:skill_bridge_mobile/core/core.dart' as _i5;
import 'package:skill_bridge_mobile/features/features.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockExamRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockExamRepository extends _i1.Mock
    implements _i3.MockExamRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.MockExam>>> getMocks(
          {required bool? isRefreshed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMocks,
          [],
          {#isRefreshed: isRefreshed},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.MockExam>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.MockExam>>(
          this,
          Invocation.method(
            #getMocks,
            [],
            {#isRefreshed: isRefreshed},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.MockExam>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.MockExam>>(
          this,
          Invocation.method(
            #getMocks,
            [],
            {#isRefreshed: isRefreshed},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.MockExam>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Mock>> getMockById(
    String? id,
    int? pageNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMockById,
          [
            id,
            pageNumber,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Mock>>.value(
            _FakeEither_0<_i5.Failure, _i3.Mock>(
          this,
          Invocation.method(
            #getMockById,
            [
              id,
              pageNumber,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.Mock>>.value(
                _FakeEither_0<_i5.Failure, _i3.Mock>(
          this,
          Invocation.method(
            #getMockById,
            [
              id,
              pageNumber,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Mock>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.MockExam>> getMockAnalysis() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMockAnalysis,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.MockExam>>.value(
            _FakeEither_0<_i5.Failure, _i3.MockExam>(
          this,
          Invocation.method(
            #getMockAnalysis,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.MockExam>>.value(
                _FakeEither_0<_i5.Failure, _i3.MockExam>(
          this,
          Invocation.method(
            #getMockAnalysis,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.MockExam>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i3.DepartmentMock>>> getDepartmentMocks({
    required String? departmentId,
    required bool? isStandard,
    required bool? isRefreshed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDepartmentMocks,
          [],
          {
            #departmentId: departmentId,
            #isStandard: isStandard,
            #isRefreshed: isRefreshed,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.DepartmentMock>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.DepartmentMock>>(
          this,
          Invocation.method(
            #getDepartmentMocks,
            [],
            {
              #departmentId: departmentId,
              #isStandard: isStandard,
              #isRefreshed: isRefreshed,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.DepartmentMock>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.DepartmentMock>>(
          this,
          Invocation.method(
            #getDepartmentMocks,
            [],
            {
              #departmentId: departmentId,
              #isStandard: isStandard,
              #isRefreshed: isRefreshed,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.DepartmentMock>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> upsertMockScore(
    String? mockId,
    int? score,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsertMockScore,
          [
            mockId,
            score,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #upsertMockScore,
            [
              mockId,
              score,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #upsertMockScore,
            [
              mockId,
              score,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserMock>>> getMyMocks(
          {required bool? isRefreshed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyMocks,
          [],
          {#isRefreshed: isRefreshed},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserMock>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.UserMock>>(
          this,
          Invocation.method(
            #getMyMocks,
            [],
            {#isRefreshed: isRefreshed},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserMock>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.UserMock>>(
          this,
          Invocation.method(
            #getMyMocks,
            [],
            {#isRefreshed: isRefreshed},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserMock>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> addMocktoUserMocks(
          String? mockId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMocktoUserMocks,
          [mockId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #addMocktoUserMocks,
            [mockId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #addMocktoUserMocks,
            [mockId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> retakeMock(String? mockId) =>
      (super.noSuchMethod(
        Invocation.method(
          #retakeMock,
          [mockId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #retakeMock,
            [mockId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #retakeMock,
            [mockId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
