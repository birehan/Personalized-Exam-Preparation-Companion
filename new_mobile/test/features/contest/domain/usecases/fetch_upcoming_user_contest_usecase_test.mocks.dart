// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/contest/domain/usecases/fetch_upcoming_user_contest_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:prep_genie/core/core.dart' as _i5;
import 'package:prep_genie/features/features.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContestRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContestRepository extends _i1.Mock implements _i3.ContestRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>
      fetchPreviousContests() => (super.noSuchMethod(
            Invocation.method(
              #fetchPreviousContests,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i3.Contest>>(
              this,
              Invocation.method(
                #fetchPreviousContests,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i3.Contest>>(
              this,
              Invocation.method(
                #fetchPreviousContests,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>> fetchContestById(
          {required String? contestId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchContestById,
          [],
          {#contestId: contestId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>>.value(
            _FakeEither_0<_i5.Failure, _i3.Contest>(
          this,
          Invocation.method(
            #fetchContestById,
            [],
            {#contestId: contestId},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>>.value(
                _FakeEither_0<_i5.Failure, _i3.Contest>(
          this,
          Invocation.method(
            #fetchContestById,
            [],
            {#contestId: contestId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>
      fetchPreviousUserContests() => (super.noSuchMethod(
            Invocation.method(
              #fetchPreviousUserContests,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i3.Contest>>(
              this,
              Invocation.method(
                #fetchPreviousUserContests,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i3.Contest>>(
              this,
              Invocation.method(
                #fetchPreviousUserContests,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.Contest>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.ContestModel?>>
      fetchUpcomingUserContest() => (super.noSuchMethod(
            Invocation.method(
              #fetchUpcomingUserContest,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i3.ContestModel?>>.value(
                    _FakeEither_0<_i5.Failure, _i3.ContestModel?>(
              this,
              Invocation.method(
                #fetchUpcomingUserContest,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, _i3.ContestModel?>>.value(
                    _FakeEither_0<_i5.Failure, _i3.ContestModel?>(
              this,
              Invocation.method(
                #fetchUpcomingUserContest,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i3.ContestModel?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>> registerUserToContest(
          String? contestId) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUserToContest,
          [contestId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>>.value(
            _FakeEither_0<_i5.Failure, _i3.Contest>(
          this,
          Invocation.method(
            #registerUserToContest,
            [contestId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>>.value(
                _FakeEither_0<_i5.Failure, _i3.Contest>(
          this,
          Invocation.method(
            #registerUserToContest,
            [contestId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Contest>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.ContestDetail>> getContestDetail(
          String? contestId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContestDetail,
          [contestId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.ContestDetail>>.value(
                _FakeEither_0<_i5.Failure, _i3.ContestDetail>(
          this,
          Invocation.method(
            #getContestDetail,
            [contestId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.ContestDetail>>.value(
                _FakeEither_0<_i5.Failure, _i3.ContestDetail>(
          this,
          Invocation.method(
            #getContestDetail,
            [contestId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.ContestDetail>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.ContestRank>> getContestRanking(
          String? contestId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContestRanking,
          [contestId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.ContestRank>>.value(
            _FakeEither_0<_i5.Failure, _i3.ContestRank>(
          this,
          Invocation.method(
            #getContestRanking,
            [contestId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.ContestRank>>.value(
                _FakeEither_0<_i5.Failure, _i3.ContestRank>(
          this,
          Invocation.method(
            #getContestRanking,
            [contestId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.ContestRank>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>
      fetchContestQuestionsByCategory({required String? categoryId}) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchContestQuestionsByCategory,
              [],
              {#categoryId: categoryId},
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.ContestQuestion>>(
              this,
              Invocation.method(
                #fetchContestQuestionsByCategory,
                [],
                {#categoryId: categoryId},
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.ContestQuestion>>(
              this,
              Invocation.method(
                #fetchContestQuestionsByCategory,
                [],
                {#categoryId: categoryId},
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> submitUserContestAnswer(
          _i3.ContestUserAnswer? contestUserAnswer) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitUserContestAnswer,
          [contestUserAnswer],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #submitUserContestAnswer,
            [contestUserAnswer],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #submitUserContestAnswer,
            [contestUserAnswer],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>
      fetchContestAnalysisByCategory({required String? categoryId}) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchContestAnalysisByCategory,
              [],
              {#categoryId: categoryId},
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.ContestQuestion>>(
              this,
              Invocation.method(
                #fetchContestAnalysisByCategory,
                [],
                {#categoryId: categoryId},
              ),
            )),
            returnValueForMissingStub: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.ContestQuestion>>(
              this,
              Invocation.method(
                #fetchContestAnalysisByCategory,
                [],
                {#categoryId: categoryId},
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.ContestQuestion>>>);
}
