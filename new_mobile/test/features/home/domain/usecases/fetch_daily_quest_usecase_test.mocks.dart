// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/home/domain/usecases/fetch_daily_quest_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:skill_bridge_mobile/core/core.dart' as _i5;
import 'package:skill_bridge_mobile/features/features.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserCourse>>> getMyCourses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyCourses,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserCourse>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.UserCourse>>(
          this,
          Invocation.method(
            #getMyCourses,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserCourse>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.UserCourse>>(
          this,
          Invocation.method(
            #getMyCourses,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.UserCourse>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.ExamDate>>> getExamDate() =>
      (super.noSuchMethod(
        Invocation.method(
          #getExamDate,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.ExamDate>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.ExamDate>>(
          this,
          Invocation.method(
            #getExamDate,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.ExamDate>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.ExamDate>>(
          this,
          Invocation.method(
            #getExamDate,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.ExamDate>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.HomeEntity>> getHomeContent(
          bool? refresh) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHomeContent,
          [refresh],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.HomeEntity>>.value(
            _FakeEither_0<_i5.Failure, _i3.HomeEntity>(
          this,
          Invocation.method(
            #getHomeContent,
            [refresh],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.HomeEntity>>.value(
                _FakeEither_0<_i5.Failure, _i3.HomeEntity>(
          this,
          Invocation.method(
            #getHomeContent,
            [refresh],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.HomeEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.DailyStreak>> fetchDailyStreak(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyStreak,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.DailyStreak>>.value(
            _FakeEither_0<_i5.Failure, _i3.DailyStreak>(
          this,
          Invocation.method(
            #fetchDailyStreak,
            [
              startDate,
              endDate,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.DailyStreak>>.value(
                _FakeEither_0<_i5.Failure, _i3.DailyStreak>(
          this,
          Invocation.method(
            #fetchDailyStreak,
            [
              startDate,
              endDate,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.DailyStreak>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>> fetchDailyQuiz() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyQuiz,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>>.value(
            _FakeEither_0<_i5.Failure, _i3.DailyQuiz>(
          this,
          Invocation.method(
            #fetchDailyQuiz,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>>.value(
                _FakeEither_0<_i5.Failure, _i3.DailyQuiz>(
          this,
          Invocation.method(
            #fetchDailyQuiz,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>> fetchDailyQuizForAnalysis(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyQuizForAnalysis,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>>.value(
            _FakeEither_0<_i5.Failure, _i3.DailyQuiz>(
          this,
          Invocation.method(
            #fetchDailyQuizForAnalysis,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>>.value(
                _FakeEither_0<_i5.Failure, _i3.DailyQuiz>(
          this,
          Invocation.method(
            #fetchDailyQuizForAnalysis,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.DailyQuiz>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> submitDailyQuizAnswer(
          _i3.DailyQuizAnswer? dailyQuizAnswer) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitDailyQuizAnswer,
          [dailyQuizAnswer],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #submitDailyQuizAnswer,
            [dailyQuizAnswer],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #submitDailyQuizAnswer,
            [dailyQuizAnswer],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.DailyQuest>>> fetchDailyQuest() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyQuest,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.DailyQuest>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.DailyQuest>>(
          this,
          Invocation.method(
            #fetchDailyQuest,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i3.DailyQuest>>>.value(
                _FakeEither_0<_i5.Failure, List<_i3.DailyQuest>>(
          this,
          Invocation.method(
            #fetchDailyQuest,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.DailyQuest>>>);
}
