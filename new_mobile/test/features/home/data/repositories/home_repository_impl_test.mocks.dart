// Mocks generated by Mockito 5.4.4 from annotations
// in skill_bridge_mobile/test/features/home/data/repositories/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:prep_genie/core/core.dart' as _i5;
import 'package:prep_genie/features/features.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeModel_0 extends _i1.SmartFake implements _i2.HomeModel {
  _FakeHomeModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDailyStreakModel_1 extends _i1.SmartFake
    implements _i2.DailyStreakModel {
  _FakeDailyStreakModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDailyQuizModel_2 extends _i1.SmartFake
    implements _i2.DailyQuizModel {
  _FakeDailyQuizModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_3 extends _i1.SmartFake implements _i3.IOSOptions {
  _FakeIOSOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_4 extends _i1.SmartFake
    implements _i3.AndroidOptions {
  _FakeAndroidOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_5 extends _i1.SmartFake implements _i3.LinuxOptions {
  _FakeLinuxOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_6 extends _i1.SmartFake
    implements _i3.WindowsOptions {
  _FakeWindowsOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_7 extends _i1.SmartFake implements _i3.WebOptions {
  _FakeWebOptions_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_8 extends _i1.SmartFake implements _i3.MacOsOptions {
  _FakeMacOsOptions_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteDatasource extends _i1.Mock
    implements _i2.HomeRemoteDatasource {
  @override
  _i4.Future<List<_i2.UserCourse>> getMyCourses() => (super.noSuchMethod(
        Invocation.method(
          #getMyCourses,
          [],
        ),
        returnValue: _i4.Future<List<_i2.UserCourse>>.value(<_i2.UserCourse>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.UserCourse>>.value(<_i2.UserCourse>[]),
      ) as _i4.Future<List<_i2.UserCourse>>);

  @override
  _i4.Future<List<_i2.ExamDateModel>> getExamDate() => (super.noSuchMethod(
        Invocation.method(
          #getExamDate,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.ExamDateModel>>.value(<_i2.ExamDateModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.ExamDateModel>>.value(<_i2.ExamDateModel>[]),
      ) as _i4.Future<List<_i2.ExamDateModel>>);

  @override
  _i4.Future<_i2.HomeModel> getHomeContent() => (super.noSuchMethod(
        Invocation.method(
          #getHomeContent,
          [],
        ),
        returnValue: _i4.Future<_i2.HomeModel>.value(_FakeHomeModel_0(
          this,
          Invocation.method(
            #getHomeContent,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.HomeModel>.value(_FakeHomeModel_0(
          this,
          Invocation.method(
            #getHomeContent,
            [],
          ),
        )),
      ) as _i4.Future<_i2.HomeModel>);

  @override
  _i4.Future<_i2.DailyStreakModel> fetchDailyStreak(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyStreak,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i4.Future<_i2.DailyStreakModel>.value(_FakeDailyStreakModel_1(
          this,
          Invocation.method(
            #fetchDailyStreak,
            [
              startDate,
              endDate,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DailyStreakModel>.value(_FakeDailyStreakModel_1(
          this,
          Invocation.method(
            #fetchDailyStreak,
            [
              startDate,
              endDate,
            ],
          ),
        )),
      ) as _i4.Future<_i2.DailyStreakModel>);

  @override
  _i4.Future<_i2.DailyQuizModel> fetchDailyQuiz() => (super.noSuchMethod(
        Invocation.method(
          #fetchDailyQuiz,
          [],
        ),
        returnValue: _i4.Future<_i2.DailyQuizModel>.value(_FakeDailyQuizModel_2(
          this,
          Invocation.method(
            #fetchDailyQuiz,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DailyQuizModel>.value(_FakeDailyQuizModel_2(
          this,
          Invocation.method(
            #fetchDailyQuiz,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DailyQuizModel>);

  @override
  _i4.Future<_i2.DailyQuizModel> fetchDailyQuizForAnalysis(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyQuizForAnalysis,
          [id],
        ),
        returnValue: _i4.Future<_i2.DailyQuizModel>.value(_FakeDailyQuizModel_2(
          this,
          Invocation.method(
            #fetchDailyQuizForAnalysis,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DailyQuizModel>.value(_FakeDailyQuizModel_2(
          this,
          Invocation.method(
            #fetchDailyQuizForAnalysis,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.DailyQuizModel>);

  @override
  _i4.Future<void> submitDailyQuizAnswer(
          _i2.DailyQuizAnswer? dailyQuizAnswer) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitDailyQuizAnswer,
          [dailyQuizAnswer],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.DailyQuestModel>> fetchDailyQuest() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDailyQuest,
          [],
        ),
        returnValue: _i4.Future<List<_i2.DailyQuestModel>>.value(
            <_i2.DailyQuestModel>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.DailyQuestModel>>.value(
            <_i2.DailyQuestModel>[]),
      ) as _i4.Future<List<_i2.DailyQuestModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i3.FlutterSecureStorage {
  @override
  _i3.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_3(
          this,
          Invocation.getter(#iOptions),
        ),
        returnValueForMissingStub: _FakeIOSOptions_3(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i3.IOSOptions);

  @override
  _i3.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_4(
          this,
          Invocation.getter(#aOptions),
        ),
        returnValueForMissingStub: _FakeAndroidOptions_4(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i3.AndroidOptions);

  @override
  _i3.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_5(
          this,
          Invocation.getter(#lOptions),
        ),
        returnValueForMissingStub: _FakeLinuxOptions_5(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i3.LinuxOptions);

  @override
  _i3.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_6(
          this,
          Invocation.getter(#wOptions),
        ),
        returnValueForMissingStub: _FakeWindowsOptions_6(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i3.WindowsOptions);

  @override
  _i3.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_7(
          this,
          Invocation.getter(#webOptions),
        ),
        returnValueForMissingStub: _FakeWebOptions_7(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i3.WebOptions);

  @override
  _i3.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_8(
          this,
          Invocation.getter(#mOptions),
        ),
        returnValueForMissingStub: _FakeMacOsOptions_8(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i3.MacOsOptions);

  @override
  _i4.Future<void> write({
    required String? key,
    required String? value,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> read({
    required String? key,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<bool> containsKey({
    required String? key,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> delete({
    required String? key,
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, String>> readAll({
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i4.Future<Map<String, String>>);

  @override
  _i4.Future<void> deleteAll({
    _i3.IOSOptions? iOptions,
    _i3.AndroidOptions? aOptions,
    _i3.LinuxOptions? lOptions,
    _i3.WebOptions? webOptions,
    _i3.MacOsOptions? mOptions,
    _i3.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [HomeLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeLocalDatasource extends _i1.Mock
    implements _i2.HomeLocalDatasource {
  @override
  _i4.Future<_i2.HomeModel?> getCachedHomeState() => (super.noSuchMethod(
        Invocation.method(
          #getCachedHomeState,
          [],
        ),
        returnValue: _i4.Future<_i2.HomeModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.HomeModel?>.value(),
      ) as _i4.Future<_i2.HomeModel?>);

  @override
  _i4.Future<void> saveData(dynamic rawData) => (super.noSuchMethod(
        Invocation.method(
          #saveData,
          [rawData],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cacheDailyStreak(
    dynamic dailyStreak,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheDailyStreak,
          [
            dailyStreak,
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.DailyStreakModel?> getCachedDailyStreak(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedDailyStreak,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i4.Future<_i2.DailyStreakModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.DailyStreakModel?>.value(),
      ) as _i4.Future<_i2.DailyStreakModel?>);

  @override
  _i4.Future<void> cacheDailyQuest(dynamic dailyQuest) => (super.noSuchMethod(
        Invocation.method(
          #cacheDailyQuest,
          [dailyQuest],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.DailyQuestModel>?> getCachedDailyQuest() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedDailyQuest,
          [],
        ),
        returnValue: _i4.Future<List<_i2.DailyQuestModel>?>.value(),
        returnValueForMissingStub:
            _i4.Future<List<_i2.DailyQuestModel>?>.value(),
      ) as _i4.Future<List<_i2.DailyQuestModel>?>);

  @override
  _i4.Future<void> cacheDailyQuiz(dynamic dailyQuiz) => (super.noSuchMethod(
        Invocation.method(
          #cacheDailyQuiz,
          [dailyQuiz],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.DailyQuizModel?> getCachedDailyQuiz() => (super.noSuchMethod(
        Invocation.method(
          #getCachedDailyQuiz,
          [],
        ),
        returnValue: _i4.Future<_i2.DailyQuizModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.DailyQuizModel?>.value(),
      ) as _i4.Future<_i2.DailyQuizModel?>);
}
